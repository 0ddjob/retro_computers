                     Секреты "Вектора" и "Кристы".


Секреты "Вектора" и "Кристы". В 2 кн.
Кн.1. Описание ПК "Вектор-06ц" и "Криста-2": возможности,
      внешние устройства, программирование микросхем.
Кн.2. Описание операционных систем и мониторов. Возможности,
      особенности эксплуатации.

(C) Copyright 1993 by Spase corporation.
All rights reserved.
644083 г.Омск, ул. Коммунальная, д.19, кв. 28.
Телефон (3812) - 655730.
Шашков Вячеслав Александрович.

    Для чтения книги необходимо  знание  языка  Ассемблер  хотя  бы  в
небольшом объеме.

     Секреты "Вектора" и "Кристы". ...............................1
     Клавиатура ПК представляет собой для программиста 3 порта: ..3
     Видеопамять состоит из четырех видеоплоскостей: .............5
     Каждая видеоплоскость представляет собой квадрат 256х256 точе6
     Работа "Кристы-2" в двухцветном режиме. .....................7
     Программирование цветов в "Векторе-06ц". ....................8
     Вертикальный рулонный сдвиг. ................................11
     Управляющее слово имеет следующий формат: ...................14
     Существует два способа чтения текущего значения счетчика кана15
     При вводе биты порта РС имеют следующее значение: ...........17
     При выводе: .................................................18
     КОНТРОЛЛЕР НАКОПИТЕЛЯ НА ГИБКИХ МАГНИТНЫХ ДИСКАХ ............20
     1. Вспомогательные команды. .................................20
     2. Команды чтения и записи данных. ..........................21
     Значение битов регистра Status: .............................22
     Содержимое регистра Status: .................................22
     4. Команды прерывания. ......................................23
     Коды команд: ................................................23
     Назначение служебных байтов (MFM): ..........................24
     В режиме MFM на одну дорожку можно записать: ................24
     В ПК "Вектор" адреса регистров БИС (номера портов) следующие:25
     Запись информации на диск на ПК "Криста-2". .................31





                  КРАТКАЯ ХАРАКТЕРИСТИКА ПЕРСОНАЛЬНЫХ ЭВМ
                       "ВЕКТОР - 06Ц" И "КРИСТА - 2"

    Персональные компьютеры "Вектор-06ц" и "Криста-2"  являются  восьмираз-
рядными ПК на базе микропроцессора КР580ВМ80А (аналог Intel  \8080a,  Intel
corp., 1974). Процессор работает на тактовой частоте 2.5 мГц у "Кристы-2" и
3.0 мГц у "Вектора-06ц". В машинах применено ОЗУ динамического типа;  реге-
нерация производится без остановки микропроцессора. Объем ОЗУ составляет 64
Кб. Из них от 8 до 32 Кб занимает видеопамять. В зависимости от режима  ра-
боты, видеоадаптер ПК может отображать графическую информацию в 2 - 16 цве-
тах с разрешением 256х256, 2 - 4 цветах с разрешением 512х256; "Криста-2" -
2 цвета 1024х256. На "Векторе" изображение выводится  цветами,  выбираемыми
из набора в 256 цветов; на "Кристе" цвета фиксированные. ПК имеют одноуров-
невое прерывание от видеоадаптера (период 20 мс). Имеется встроенный  трех-
голосный музыкальный синтезатор на м/с  КР580ВИ53  и  адаптер  магнитофона.
Клавиатура - встроенная, многофункциональная. Имеется адаптер  параллельно-
го интерфейса (м/с КР580ВВ55), буферизированная системная шина. Из  внешних
устройств кооперативами, частными фирмами и заводами-изготовителями  выпус-
каются: модуль внешнего ПЗУ, модуль расширения ОЗУ до 320  Кб  (электронный
диск), контроллер дисковода, часы реального времени, адаптер мыши.
    Программное обеспечение состоит  из  программы  "Начальный  загрузчик",
размещенной в ПЗУ, и ПО, поставляемого на кассете  или  дискете.  Начальный
загрузчик может загрузить программу с магнитофона (в модели  "Вектор-06-02"
установлен универсальный загрузчик, поддерживающий магнитофон,  дисковод  и
внешнее ПЗУ). Форматы Начального загрузчика ПК "Вектор" и  "Криста"  несов-
местимы. В продаже имеются микросхемы  Универсального  загрузчика  (Вектор,
Криста, диск, ПЗУ) и м/с с программой Монитор.
    На  кассете  поставляется  монитор-отладчик,    интерпретатор    Basic,
ТЕСТ-система, Ассемблер. Существуют версии языков Паскаль (компилятор),  Си
(компилятор), Форт, текстовые редакторы, базы данных. При наличии  контрол-
лера дисковода на ПК функционируют ОС CP/M 2.2 фирмы Digital Research  Inc.
и Микродос. В их среде работают сотни программ для данного процессора.  Для
ПК этого типа создано на сегодняшний день (конец 1993 года) более 1000  иг-
ровых программ.











                   А Д А П Т Е Р     К Л А В И А Т У Р Ы

    Клавиатура ПК представляет собой для программиста 3 порта:

     ┌─────┬─────────┬──────────────────────────────┐
     │ N   │ доступ  │  описание                    │
     ├─────┼─────────┼──────────────────────────────┤
     │ 01  │ чтение  │  клавиши <УС>, <СС>, <РУС>   │
     │     │ запись  │  индикатор <РУС>, <ЛАТ>      │
     ├─────┼─────────┼──────────────────────────────┤
     │ 02  │ чтение  │  чтение линии сканирования   │
     ├─────┼─────────┼──────────────────────────────┤
     │ 03  │ запись  │  выбор лини сканирования     │
     └─────┴─────────┴──────────────────────────────┘

    Клавиатура подключена к тем же самым портам 02 и 03, что  и  видеоадап-
тер. К тому же при обращении к клавиатуре порт 02 должен работать на  ввод,
а при работе видеоадаптера - на вывод. Возникает конфликт  между  клавиату-
рой и видеоадаптером.
    Чтобы такой конфликт не возникал, нужно обращаться к клавиатуре  в  мо-
менты, когда на экране ничего нет, т.е. во время  обратного  хода  кадровой
развертки. Для определения этого момента, как обычно,  используется  сигнал
прерывания. Из этого следует, что нельзя опрашивать клавиатуру более 50 раз
в секунду без ущерба для изображения на экране.
    Клавиатура представляет собой матрицу 8х8 клавишей. Одна сторона матри-
цы подключена к порту 03, другая - 02. Ее схема  построена  таким  образом,
что в порт 03 возможна только запись, а из порта 02 - только чтение.
    Чтобы определить, какая клавиша нажата, нужно  просканировать  матрицу.
Делается это так. Назовем вертикалями линии, подключенные к порту 03, а го-
ризонталями - подключенные к порту 02. Будем заносить в порт 03 число,  все
биты которого, за исключением одного, единичные. Нулевой бит выбирает  вер-
тикаль сканирования. Если на этой вертикали имеются нажатые клавиши,  то  в
битах, соответствующих горизонталям, на которых расположены нажатые  клави-
ши, байта, читаемого из порта 02, будут записаны нули, а в остальных - еди-
ницы. Если на данной вертикали нажатых клавиш нет, то из порта 02  читается
FF.
    Если нужно просто определить "статус консоли", можно послать в порт  03
байт 00, и если из порта 02 читается байт, отличный от FF, то хотя бы  одна
клавиша нажата.
    Таким образом, можно независимо опросить любую клавишу. Это  не  совсем
так на машинах с так называемой "емкостной" клавиатурой. Таймеры, на  кото-
рых она построена, имеют некоторую задержку срабатывания, и потому  некото-
рые клавиши очень сложно опросить одновременно.  Например,  трудно  опреде-
лить одновременное нажатие клавиш "Пробел" и "Вниз".

    Разумеется, после сканирования матрицы следует перепрограммировать  м/с
системного интерфейса для работы видеоадаптера.
    Для опроса клавиш <УС>, <СС>, <РУС/ЛАТ>  (на  "Кристе-2"  клавише  <СС>
соответствует <РЕГ> ) не нужно дожидаться прерывания и  перепрограммировать
интерфейс. Нужно просто прочитать  содержимое  порта  01  и  выделить  биты
5,6,7. Нулевое значение их соответствует нажатию <УС>, <СС>, <РУС/ЛАТ>.
    Программа опроса клавиатуры, разумеется, включается в любую  операцион-
ную среду - монитор, эмулятор, операционная система. В зависимости от  пос-
тавленных задач программист может избрать разные стратегии построения прог-
раммы опроса клавиатуры. Опишем две из них.
    Первую стратегию назовем условно "Прерывания разрешены". Такая  страте-
гия применяется почти во всех ОС, мониторах и т.п. Заключается она  в  том,
что прерывания постоянно разрешены и вектор прерывания (ячейки 38-3А) всег-
да показывает на обработчик клавиатуры (программа  сканирования).  Обработ-
чик сканирует клавиатуру и записывает коды нажатых клавиш в специальный бу-
фер, откуда потом их можно читать. Таким образом,  можно,  например,  наби-
рать текст в "фоновом" режиме (во время выполнения  компьютером  каких-либо
других действий). Недостаток  такого  подхода  -  постоянное  использование
ячеек 38-3А и необходимость следить за прерываниями, скажем,  в  программах
обмена с магнитофоном, дисководом и электронным диском.
    Другая  стратегия  называется  "Прерывания  запрещены"  и  используется
только в мониторах типа Spase System. Согласно этой  стратегии,  прерывания
разрешаются только в момент вызова функции опроса клавиатуры, и  вызывающая
программа этого не замечает. В эти моменты в ячейки 38-3А записывается век-
тор прерывания; старое содержимое их сохраняется, а после сканирования вос-
станавливается. Разумеется, при такой стратегии нельзя вводить информацию в
фоновом режиме. Поскольку при опросе клавиатуры происходит ожидание  преры-
вания, среднее время выполнения такой программы велико (1/100 сек.)  Исходя
из вышесказанного, такую стратегию целесообразно использовать только в  от-
ладочно-инструментальных системах.
    Существуют и другие стратегии (например,  основанные  на  использовании
таймера) но в связи со все более широким распространением контроллеров дис-
ковода и операционных систем проработка каких-то  еще  стратегий  представ-
ляется автору очень маловероятной.











                          В И Д Е О А Д А П Т Е Р

    Видеоадаптер ПК "Вектор-06ц" и "Криста-2" позволяет выводить  на  экран
видеоконтрольного устройства графическую информацию в следующих режимах:

 - 256х256 точек при 2, 4, 8, 16 цветах;
 - 512х256 точек при 2 и 4 цветах;
 - 1024х256 точек при 2 цветах (только "Криста-2").

    Для программиста видеоадаптер представляет собой видеоОЗУ и порты:

┌──────┬─────────────────────────────────┬─────────────────────────────────┐
│ N    │     Назначение на Векторе       │     Назначение на Кристе        │
├──────┼─────────────────────────────────┼─────────────────────────────────┤
│ 02   │ Цвет бордюра; переключение режи-│ Цвет бордюра;переключение сдвига│
│      │ ма 256 <-> 512; номер математи- │ #1; номер палитры в двуцветном  │
│      │ ческого цвета при программирова-│ режиме                          │
│      │ нии палитры                     │                                 │
├──────┼─────────────────────────────────┼─────────────────────────────────┤
│ 03   │ Регистр рулонного смещения      │ Регистр рулонного смещения      │
├──────┼─────────────────────────────────┼─────────────────────────────────┤
│ 0C-0F│ Номер физического цвета при про-│ Не задействован                 │
│      │ граммировании палитры           │                                 │
├──────┼─────────────────────────────────┼─────────────────────────────────┤
│ 85   │ Не задействован                 │ Переключатель режима 2 / 16 цве-│
│      │                                 │ тов; переключение сдвига #2; ре-│
│      │                                 │ гистр гашения видеоплоскостей   │
└──────┴─────────────────────────────────┴─────────────────────────────────┘

    Видеопамять состоит из четырех видеоплоскостей:

        ┌─────┬─────┬────────┬───────┐
        │ N   │ имя │ начало │ конец │
        ├─────┼─────┼────────┼───────┤
        │  0  │  Y  │ 8000   │ 9FFF  │
        │  1  │  R  │ A000   │ BFFF  │
        │  2  │  G  │ C000   │ DFFF  │
        │  3  │  B  │ E000   │ FFFF  │
        └─────┴─────┴────────┴───────┘






    Каждая видеоплоскость представляет собой квадрат 256х256 точек:


               80хх        81хх   82хх  9Fхх
          ├─┼─┼─┼─┼─┼─┼─┼─┼─────┼─────┤ ... │ \
          │7│6│5│4│3│2│1│0│     │     │ ... │ │
          ├─┼─┼─┼─┼─┼─┼─┼─┼─────┼─────┤ ... │ │
          │ │ │ │ │ │ │ │ │     │     │ ... │  > 256 байт
               ...                            │
          ├───────────────┼─────┼─────┤ ... │ /

    Разумеется, плоскость Y взята только для примера.
    Число хх здесь  -  содержимое регистра рулонного смещения. Это число  -
младшая половина адреса байта, выводимого на экран первым сверху. Затем ад-
реса убывают сверху вниз без заема (следом за 8200, например, идет 82FF,  а
не 81FF).
    При выводе точки на экран видеоконтроллер считывает по одному биту сра-
зу из всех четырех видеоплоскостей. Получившееся 4-хбитное  значение  назы-
вается математическим цветом точки. Математический цвет точки далее обраба-
тывается преобразователем математического цвета в физический.
    В ПК "Криста-2" в качестве преобразователя используется ПЗУ  (К556РТ5).
Стандартная прошивка этого ПЗУ сделана так, что математический  цвет  соот-
ветствует физическому: биты Y,R,G,B  отвечают  соответственно  за  яркость,
красный, зеленый и синий лучи (в  дальнейшем  в  четырехбитном  числе  YRGB
старший бит принимается Y).
    В ПК "Вектор-06ц" применена схема перепрограммируемых  цветов,  которая
позволяет любому математическому цвету присвоить один из 256 возможных  фи-
зических цветов.
    Аналогично происходит работа видеоадаптера в режиме с  меньшим  (2,4,8)
количеством цветов. На "Векторе" запрет отображения определенных  математи-
ческих цветов достигается путем соответствующего программирования цвета, на
"Кристе" имеется специальная схема управления цветом, подключенная к  порту
85h.
      ┌─────┬─────────────────────────────────────┐
      │ бит │  Описание                           │
      ├─────┼─────────────────────────────────────┤
      │  0  │ 1 = сдвиг 2 включен                 │
      │  1  │ 1 = 2 цвета; 0 = 16 цветов          │
      │  2  │ вход последовательного интерфейса   │
      │  3  │ выход последовательного интерфейса  │
      │  4  │ 1 = видеоплоскость Y отображается   │
      │  5  │ 1 = видеоплоскость R отображается   │
      │  6  │ 1 = видеоплоскость G отображается   │
      │  7  │ 1 = видеоплоскость B отображается   │
      └─────┴─────────────────────────────────────┘

Примечание. Если одна из видеоплоскостей запрещена, то она не влияет на ма-
            тематический цвет точек. В битах,  соответствующих  ей,  всегда
            находятся нули. Например, пусть плоскость Y запрещена и  однов-
            ременно заполнена кодом 0FFH. Тогда точка, биты R,G,B которой -
            0, имеет математический цвет 0, несмотря на  то,  что  соответ-
            ствующий ей бит плоскости Y равен 1. Таким образом, нужно  раз-
            личать бит Y и видеоплоскость Y (то же и для остальных плоскос-
            тей).

    Таким образом, для включения двухцветного режима на "Кристе"  необходи-
мо дополнительно установить бит 1 порта 85h. Работа "Кристы-2" в  двухцвет-
ном режиме будет описана ниже.
    Работа видеоадаптера в режиме 512х256  точек  несколько  отличается  от
описанной выше. Для перехода в этот режим активируют так называемый  "сдвиг
видеоплоскостей". Он включен, если бит 4 порта 2 установлен. При  этом  ви-
деоплоскости Y и R сдвигаются на 1/2 точки относительно G и B: на "Векторе"
- вправо, на "Кристе" - влево. Таким образом, получается,  что  все  четные
точки находятся в видеоплоскостях G и B, а нечетные - в Y и R (для  "Векто-
ра"; на "Кристе" все в точности наоборот). Математический цвет  формируется
по такому же правилу, как и в режиме 256х256,  при  этом  "свободные"  биты
принимаются равными 0 (на "Векторе для четных точек свободными будут биты Y
и R). Соответствующим программированием цветов на "Векторе" можно  включить
двухцветовой режим 512х256, оставив 2 видеоплоскости. Такой режим  при  ак-
тивных R и G используется почти всеми мониторами и операционными  системами
и в этой книге считается стандартным.
    Для обеспечения совместимости (переносимости с "Вектора" на "Кристу"  и
наоборот) программы, использующие режим 512х256 должны проверять тип  ПК  и
настраиваться на него. Из известных автору переносимых программ можно  наз-
вать Монитор-Отладчик, версия 2.52 и 2.54, адаптация Дмитрия  Платонова,  и
Spase System 2.0 и выше.
    ПК "Криста-2" имеет "таинственный" видеорежим, отсутствующий на "Векто-
ре" - 1024х256 точек. Он подобен режиму 512х256. Для  его  включения  нужно
одновременно установить бит 4 в порту 02 и бит 1 в порту 85h. При  установ-
ке последнего включается второй сдвиг - плоскости Y и G сдвигаются влево на
1/2 точки. Таким образом, точки на экране лежат так:

 Y7 R7 G7 B7 Y6 R6 G6 B6 Y5 ...


                  Работа "Кристы-2" в двухцветном режиме.

    Ограничение числа отображаемых одновременно цветов на "Кристе-2"  двумя
может производиться двумя способами. Первый заключается в том, что все  ви-
деоплоскости кроме одной запрещаются. Никаких особенностей этот  способ  не
представляет и потому подробно останавливаться на нем мы не будем.  Отметим
лишь, что, поскольку изображение будет окрашено в один из основных  цветов,
нужно помнить, что цвет 8 (1000) виден только на  черно-белом  мониторе  и,
следовательно, использование видеоплоскости Y  при  таком  способе  нежела-
тельно.
    Второй способ требует перевода видеоадаптера в двухцветный  режим.  Для
этого устанавливают бит 1 порта 85h. При  этом  все  математические  цвета,
кроме 0, считаются цветом изображения, а 0 - цветом фона. Биты 0-3 порта 02
содержат номер палитры:

        Число     Цвет фона              Цвет изображения
         0        Черный                 Синий
         1        Черный                 Темно-зеленый
         2        Темно-зеленый          Красный
         3        Темно-зеленый          Светло-зеленый
         4        Темно-зеленый          Голубой
         5        Синий                  Желтый
         6        Синий                  Темно-зеленый
         7        Синий                  Светло-зеленый
         8        Коричневый             Зеленый
         9        Коричневый             Синий
         A        Красный                Белый
         B        Красный                Синий
         C        Светло-зеленый         Белый
         D        Светло-зеленый         Голубой
         E        Голубой                Белый
         F        Фиолетовый             Темно-зеленый

    Можно оставить включенными любое количество видеоплоскостей. Режим, при
котором включены видеоплоскости R и G при 2-х цветах и  разрешении  512х256
является стандартным для операционных систем на "Кристе-2".

                  Программирование цветов в "Векторе-06ц".

    Видеоадаптер ПК "Вектор-06ц" позволяет отображать информацию в  цветах,
выбираемых из 256 цветов. Число одновременно отображаемых цветов зависит от
числа задействованных видеоплоскостей и может достигать 16.
    Физическим цветом называют восьмибитное число. Кодируется оно так:

      ┌────┬────┬────┬────┬────┬────┬────┬────┐
      │ D7 │ D6 │ D5 │ D4 │ D3 │ D2 │ D1 │ D0 │
      ├────┴────┼────┴────┴────┼────┴────┴────┤
      │  Синий  │    Зеленый   │    Красный   │
      └─────────┴──────────────┴──────────────┘


    Чем больше значение, соответствующее какому-либо лучу, тем  больше  его
вклад в итоговый  цвет.  Например,  число  00111111  (3FH)  -  ярко-желтый;
00011011 (1BH) - коричневый и т.д.
    Как говорилось выше, информация о цвете точки хранится  в  4-х  битовых
плоскостях. Четырехбитное число, составленное из битов, описывающих  точку,
по формуле YRGB, называют математическим цветом  точки  (В  режиме  512х256
цвет точки описывается двумя битами; для получения четырехбитного  значения
биты, соответствующие плоскостям, не принимающим участия в отображении дан-
ной точки, принимаются равными 0).  Каждому  из  16  математических  цветов
соответствует один из 256  физических.  Процесс  присвоения  математическим
цветам физических называют программированием цветов  (иногда  -  установкой
палитры).
    Для присвоения математическому цвету физического используется порт  0CH
(или любой 0CH - 0FH). Число, записанное в этот порт,  становится  физичес-
ким цветом для математического цвета, выводимого на экран в момент записи в
порт.
    Однако в произвольный момент времени нельзя определить, какой математи-
ческий цвет отображается на экране (точек-то много, и они имеют разный  ма-
тематический цвет). Поэтому программирование цветов  всегда  производят  во
время отображения бордюра, поскольку его цвет однозначно  определяется  со-
держимым порта 02H. Для того, чтобы определить, когда отображается  бордюр,
используют прерывание от обратного хода кадровой развертки. Рассмотрим этот
процесс подробнее.
    В начале обратного хода кадровой развертки видеоадаптер генерирует зап-
рос прерывания микропроцессора. Затем какое-то время на  экране  ничего  не
отображается (время обратного хода кадровой  развертки).  Затем  начинается
отображение бордюра. Схема "Вектора" построена таким образом, что  16  пер-
вых строк бордюра отображаются не с начала экрана, а с 1/3.  Следовательно,
только во время отображения "задних" 2/3 бордюра возможно  программирование
цветов. Чтобы не высчитывать, можно ли записывать байт в порт  0CH,  обычно
применяют многократную запись, заботясь, чтобы один и тот  же  математичес-
кий цвет программировался не менее 25 мкс  (время  прохода  "темной"  части
строки + еще немного). Практически это можно сделать, например, так:











PROG:   DI                  ; Запретить прерывания
        LDA 38H             ; Сохраним значение ячейки 38H
        MOV B,A             ; в регистре B
        MVI A,0C9H          ; и запишем код команды RET
        STA 38H             ; туда
        EI                  ; будем ждать прерывания
        HLT
; Прерывание произошло
        LXI H,COLOR         ; Загрузим адрес таблицы цветов
        IN 02H              ; Сохраним цвет бордюра
        MOV C,A             ; в регистре C
        MVI D,10H           ; D - счетчик
        XTHL                ; Задержка для завершения обратного
        XTHL                ; хода кадровой развертки
LOOP:   MOV A,D
        DCR A               ; A - номер математического цвета
        OUT 02H             ; Установим его как цвет бордюра
        MOV A,M             ; A - физический цвет
        OUT 0CH             ; Программируем
        XTHL                ; "тянем время"
        OUT 0CH
        XTHL
        OUT OCH
        INX H               ; Инкремент указателя на физический цвет
        OUT 0CH
        DCR D               ; Все цвета  запрограммированы?
        JNZ LOOP            ; Нет, продолжим.
        MOV A,C             ; Восстанавливаем
        OUT 02H             ; цвет бордюра
        MOV A,B             ; и
        STA 38H             ; ячейку 38H.
        RET                 ; Закончим.
COLOR:  DB C15,C14,C13,C12,C11,C10,C9,C8,C7,C5,C4,C3,C2,C1,C0
    Здесь C0-C15 - физические цвета для соответствующих математических.
    Как уже  ясно,  цвет  бордюра  записывается  в 4 младших бита порта 02H.
    Соответствующим программированием цветов можно добиться того, что неко-
торые видеоплоскости будут не видны. Для этого нужно сделать так, чтобы  их
содержимое не оказывало влияния на физический цвет точки. Этого можно  дос-
тичь, если математическим цветам, совпадающим во всех битах, кроме тех, ко-
торые соответствуют отключаемым видеоплоскостям, присвоить одинаковый физи-
ческий цвет. Например, чтобы оставить только плоскость Y, нужно присвоить:
 - цветам 0,2,4,6,8,10,12,14 физический цвет #1 (цвет фона);
 - цветам 1,3,5,7,9,11,13,15 физический цвет #2 (цвет изображения).
  Большинство ОС и Мониторов используют в качестве видеоОЗУ плоскости R и G.
Такой режим считается стандартным для операционных систем.

                        Вертикальный рулонный сдвиг.

    Видеоадаптер ПК позволяет аппаратными  средствами  осуществлять  верти-
кальный рулонный сдвиг изображения (скроллинг). Для этого используется порт
03H.
    В момент прихода сигнала прерывания число, содержащееся  в  порту  03H,
записывается в счетчик рулонного смещения. Он хранит  младший  байт  адреса
ячейки, выводимой в данный момент времени на экран, и в процессе  развертки
работает на вычитание. Изменяя число в порту 03H, можно соответственно  из-
менять начальный адрес, с которого начинается развертка кадра, и, таким об-
разом, сдвигая картинку вверх или вниз.

                            М А Г Н И Т О Ф О Н

    Магнитофон используется в  стандартной  конфигурации  ПК  для  хранения
программ и данных. Он устроен как последовательный канал. Информация  запи-
сывается бит за битом.
    Для программиста магнитофон представляет собой 2 однобитных порта.  Для
записи использован регистр PC0, для  чтения  -  PC4  системного  интерфейса
(разряды D0 и D4 порта 01H соответственно).
    Поскольку информация в ПК, как правило, содержит постоянную  составляю-
щую, необходимо использовать т.наз. канальный код, не  содержащий  постоян-
ной составляющей. Наиболее простыми канальными кодами являются  бичастотный
и бифазный.
    Бичастотный код использует для кодирования бит посылки  двух  различных
частот. Одна из них соответствует 0, другая - 1. Этот код является  основой
стандарта MSX, иначе известном как Cansas  City.  Он  применяется  в  Basic
"Корвет".
    Бифазный метод используется в подавляющем большинстве программ. Он  ос-
новывается на изменении фазы записываемого сигнала в зависимости от переда-
ваемого бита. В середине битового интервала  сигнал  изменяется  с  низкого
уровня на высокий для записи 1 и с высокого на низкий для записи 0. В  свя-
зи с тем, что литературы по данному вопросу предостаточно (например, ЮТ для
умелых рук, 2-89), здесь мы повторяться не будем.
    Рекомендуем прочитать журнал "Радиолюбитель 10-92", где  описан  прото-
кол записи по форматам MON и ROM.  Здесь  опишем  протокол  записи  формата
Криста-2.







   число   значение   комментарий
    32       00H      ракорд
    32       55H
    32       00H
    32       55H
    01       E6H      Синхробайт
    01       FFH      Опознавание
    01       XX       Старший байт адреса первого блока
    01       XX       Старший байт адреса последнего блока
    01       XX       Сумма двух предыдущих байт.

   -------- блок информации -------------
    32       55H      Ракорд
    01       E6H      Синхробайт
    01       XX       Старший байт адреса посадки блока
    01       XX       Младший байт адреса посадки блока
    01       XX       Длина блока (число байт информации)
    **       **       Информация
    01       XX       Контрольная сумма (8 бит без учета переноса)

    В заключение необходимо отметить, что из-за аппаратных особенностей  ПК
Криста-2 во время записи на магнитофон все каналы таймера  необходимо  зап-
рограммировать в режим 0, но коэффициент пересчета не задавать.  В  против-
ном случае уровень сигнала на выходе получается слишком  низким,  не  давая
возможности обеспечить удовлетворительное качество записи.


                                Т А Й М Е Р

    В ПК  "Вектор-06ц"  и  "Криста-2"  применен  таймер  КР580ВИ53  (аналог
i8253). Он может использоваться для генерации звука, отсчета временных  ин-
тервалов и
т.п. Для программиста таймер представлен четырьмя портами:

    ┌─────────────┬─────────────┬─────────────────────┐
    │ Порт Криста │ Порт Вектор │     Назначение      │
    ├─────────────┼─────────────│─────────────────────┤
    │  08H, 88H   │    08H      │ Регистр управления  │
    │  09H, 89H   │    09H      │ Регистр канала 2    │
    │  0AH, 8AH   │    0AH      │ Регистр канала 1    │
    │  0BH, 8BH   │    0BH      │ Регистр канала 0    │
    └─────────────┴─────────────┴─────────────────────┘



    На все входы CLK таймера подана опорная частота 1.5 мГц на "Векторе" и
1.25 мГц на "Кристе".  На всех входах GATE постоянно присутствует уровень 1.
Все три канала через пассивный микшер подключены к  динамической  головке  и
выходу магнитофона.
    В состав таймера входят: буфер шины данных, схема управления вводом-вы-
водом и три независимых канала, каждый из которых содержит регистр  режима,
схему управления каналом, буфер и 16-разрядный счетчик.

     Программирование канала осуществляется путем вывода управляющих слов в
регистр режима каналов и начального значения в его счетчики.  Каждый  канал
имеет управляющий вход GATE и выход OUT и может работать в одном из следую-
щих шести режимов.

    Режим 0 (прерывание терминального  счета).  После  записи  управляющего
слова в регистр режима канала на выходе ОUT устанавливается напряжение низ-
кого уровня; загрузка счетчика не изменяет это состояние. Затем  начинается
декремент счетчика (последовательное вычитание из него единицы). В  момент,
когда счетчик обнулится, на выходе OUT устанавливается напряжение  высокого
уровня и сохраняется до загрузки счетчика новым  значением.  Счет  возможен
только при наличие сигнала высокого уровня на входе  GATE.  Низкий  уровень
этого сигнала или ниспадающий фронт запрещают счет.
    Перезагрузка счетчика во время приводит к следующему: загрузка  младше-
го байта останавливает текущий счет, загрузка старшего байта запускает  но-
вый цикл счета. Минимально допустимое значение счетчика равно 2.

    Режим 1 (ждущий мультивибратор).  На  выходе  OUT  формируется  отрица-
тельный импульс длительностью t=n*T, где n - число, загруженное в  счетчик,
T - период тактовых импульсов. Низкий уровень на выходе OUT  устанавливает-
ся со следующего такта после подачи на вход GATE сигнала высокого уровня.
    Загрузка в счетчик нового числа не влияет на длительность текущего  им-
пульса, а учитывается при следующем запуске. Перезапуск  счетчика  произво-
дится нарастающим фронтом входа GATE  (без  перезагрузки  счетчика).  Мини-
мальное допустимое n=1.

    Режим 2 (генератор частоты). Каждый раз после достижения счетчиком  ну-
ля на выходе OUT появляется  отрицательный  импульс  с  длительностью  один
такт. Перезагрузка счетчика сказывается только после перезапуска  счетчика.
При исчезновении сигнала высокого уровня на входе GATE прекращается счет  и
на выход OUT  подается  напряжение  высокого  уровня.  Перезапуск  счетчика
происходит при наличии на входе GATE сигнала высокого уровня.

    Режим 3 (генератор меандра). Аналогичен режиму 2, но положительный уро-
вень выходного сигнала занимает первый полупериод, а отрицательный  -  вто-
рой полупериод. Точнее, если n (начальное значение счетчика) четно, то дли-
тельность положительного и отрицательного полупериодов равна n*T/2; если же
n нечетно - то (n+1)*T/2 и (n-1)*Т/2 соответственно. Низкий уровень  сигна-
ла на входе GATE запрещает счет, на выходе OUT устанавливается сигнал высо-
кого уровня. Высокий уровень GATE разрешает счет, а нарастание  его  запус-
кает счетчик начального состояния. Отметим, что n=3 в этом режиме  недопус-
тимо.

    Режим 4 (счетчик событий). По окончании отсчета числа,  загруженного  в
счетчик, на выходе OUT формируется отрицательный импульс длительностью один
такт. Запись в счетчик во время счета младшего байта не влияет  на  текущий
счет, а запись старшего байта перезапускает счетчик. Низкий  уровень  входа
GATE запрещает счет, высокий - разрешает. Минимальное  допустимое  значение
счетчика равно 1.

    Режим 5 (счетчик событий с автозагрузкой). Отличие от режима 4  состоит
в том, что каждое нарастание сигнала на входе GATE  перезапускает  счетчик.
Перезагрузка счетчика не влияет на текущий цикл, однако следующий цикл  оп-
ределяется вновь занесенным числом.

      Управляющее слово имеет следующий формат:

  7  6  5  4  3  2  1  0
 ┌────┬─────┬────────┬──┐
 │    │     │        │  │  Биты                          Маска
 └────┴─────┴────────┴──┘  ----                        -------
   │     │      │      -> 0: 0 = двоичный код,           а & 1
   │     │      │            1 = двоично-десятичный код
   │     │      └───────> 1-3: режим работы канала:      а & 0Eh
   │     │                     000 - режим 0
   │     │                     001 - режим 1
   │     │                     X10 - режим 2
   │     │                     X11 - режим 3
   │     │                     100 - режим 4
   │     │                     101 - режим 5
   │     └──────────────> 4-5: вид загрузки счетчика:    а & 30h
   │                           00 - "защелкивание"
   │                                (биты 0-3 безразличны)
   │                           01 - только младший байт
   │                           10 - только старший байт
   │                           11 - младший байт, затем старший
   └────────────────────> 6-7: номер канала:             a & C0h
                               00 - канал 0
                               01 - канал 1
                               10 - канал 2
                               11 - запрещенная комбинация

    Существует два способа чтения текущего значения счетчика канала.

    1. Чтение с остановом счетчика. Для  обеспечения  стабильных  показаний
необходимо приостановить работу канала либо подачей сигнала низкого  уровня
на вход GATE (кроме режима 1), либо блокированием  тактовых  импульсов  (на
наших ПК - невозможно).

    2. Чтение "на лету". Для считывания  счетчика  без  остановки  процесса
счета используется посылка в порт 08h управляющего слова в режиме "защелки-
вания" (см. выше). Это управляющее слово фиксирует текущее значение счетчи-
ка и Вы можете считать его младший байт, а затем старший байт.


                               П Р И Н Т Е Р

    К ПК "Вектор-06ц" и "Криста-2" предусмотрено  подключение  принтера  по
стандарту ИРПР-М через используемый в ПК параллельный интерфейс. Для  "Век-
тора" существует стандартная схема такого подключения. К сожалению, изгото-
вители ПК "Криста-2" не  до  конца  документировали  подключение  принтера.
Используемые в программах, входящих в комплект поставки, драйверы  ориенти-
рованы на схему, непригодную для программ, работающих под DOS. Это  побуди-
ло Омский центр программирования разработать собственную схему подключения.

     ┌────────┬─────────────┬──────────────────┬───────────────────┐
     │ Сигнал │ Порт Вектор │ Порт Криста Омск │ Порт Криста завод │
     ├────────┼─────────────┼──────────────────┼───────────────────┤
     │ Data   │  07H        │   87H            │   87H             │
     │ Busy   │  05H, D4    │   86H, D0        │   87H, D0         │
     │ Acknlg │  -------    │   86H, D1        │   86H, D1         │
     │ Strobe │  05H, D0    │   85H, D3        │   85H, D4         │
     └────────┴─────────────┴──────────────────┴───────────────────┘
Примечание. Сигнал Acknlg используется только в драйвере  Spase  Bios  2.00.
            Рекомендуется в  случае  затруднений  вместо  него подать сигнал
            лог. 1.

    Чтобы вывести байт на принтер, нужно проделать следующие операции:

 - Дождаться готовности принтера (готовность характеризуется нулевым  значе-
   нием бита Busy);
 - Записать печатаемый байт в порт данных (Data);
 - Сбросить бит строба (Strobe);
 - Установить бит строба (Strobe).



    До начала выполнения программы уровень сигнала Strobe должен быть 1.

Вектор-06ц                Криста-2 (DOS)                Комментарий

PRINT:  PUSH PSW          PRINT:  PUSH PSW        ; Сохраним регистры
LOC:    IN 05H            LOC:    IN 86H          ; Читаем бит готовности
        ANI 10H                   ANI 1
        JNZ LOC                   JNZ LOC         ; Принтер не готов. Ждем.
        MOV A,C                   MOV A,C         ; Посылаем байт
        OUT 07H                   OUT 87H         ; в порт данных.
        MVI A,0EFH                MVI A,62H       ; Сбросим строб
        OUT 05H                   OUT 85H
        MVI A,0FFH                MVI A,6AH       ; Установим строб
        OUT 05H                   OUT 85H
        POP PSW                   POP PSW         ; Восстановим регистры
        RET                       RET             ; Выход.

    Существуют принтеры, не имеющие параллельного интерфейса, например,  СМ
6307. Такие принтеры не могут работать с имеющимися на сегодня программами.
Ввиду неудобства их использования (требуется  модификация  программ  и  ПК)
подключение их не рассматривается.


                П А Р А Л Л Е Л Ь Н Ы Й    И Н Т Е Р Ф Е Й С

    Рассматриваемые ПК  имеют  в своем составе микросхему КР580ВВ55 (i8255),
все каналы которой выведены на внешний разъем.

      ┌─────────────┬─────────────┬────────────────────┐
      │ Порт Вектор │ Порт Криста │ Назначение         │
      ├─────────────┼─────────────┼────────────────────┤
      │   04H       │    84H      │ Регистр управления │
      │   05H       │    85H      │ Регистр канала C   │
      │   06H       │    86H      │ Регистр канала B   │
      │   07H       │    87H      │ Регистр канала А   │
      └─────────────┴─────────────┴────────────────────┘
Примечание. На ПК "Криста-2" чтение портов 04H-07H дает результат 42H.  Этот
            факт можно использовать для определения типа ПК.

    ППИ (программируемый параллельный интерфейс) содержит  три  8-разрядных
порта (РА, РВ и РС) для организации обмена между ЦП и внешними  устройства-
ми и регистр управления. Порты сгруппированны в две группы: группа  А  сос-
тоит из РА и старшей тетрады РС, группа В - из РВ  и  младшей  тетрады  РС.
Группа А может работать в трех режимах (0, 1, 2); группа В- в двух  (0  и 1).
Режимы определяются содержимым регистра управления, имеющим следующий формат:
   7  6  5  4  3  2  1  0
 ┌──┬─────┬─────┬──┬────┐
 │1 │     │     │  │    │ Биты:                         Маска:
 └──┴──┬──┴──┬──┴┬─┴─┬──┘ ─────                         ------
       │     │   │   └───> 0-1: определение группы В    a & 3
       │     │   │              (зависит от режима)
       │     │   └───────> 2: режим группы В (0 или 1)  a & 4
       │     └───────────> 3-4: определение группы А    a & 18h
       │                         (зависит от режима)
       └─────────────────> 5-6: режим группы А:         a & 60h
                                  00=режим 0
                                  01=режим 1
                                  1X=режим 2

    Режим 0.  В этом режиме группа разделяется на два набора (порт и тетра-
да РС). Каждый набор может использоваться только для ввода. Биты  определе-
ния группы в регистре управления определяют, какие наборы предназначены для
ввода , а какие - для вывода (бит, равный нулю, задает  набор  для  вывода,
единица - для ввода):

         ┌──────┬───────────────────────┐
         │ Бит  │      Набор            │
         ├──────┼───────────────────────┤
         │ 4    │ РА                    │
         │ 3    │ Старшая тетрада РС    │
         │ 1    │ РВ                    │
         │ 0    │ Младшая тетрада РС    │
         └──────┴───────────────────────┘

    Режим 1. Порты РА и РВ используются для передачи данных, РС -  для  уп-
равляющих сигналов. Дальнейшее описание сделано на примере группы А. Бит  4
регистра управления задает использование порта РА (1 = порт ввода, 0 = порт
вывода).

    При вводе биты порта РС имеют следующее значение:

       Бит(ы)            Назначение
    ┌──────────┬──────────────────────────────────────────────────────┐
    │ 4 (STBA) │ 0 = "стробировать" шину данных в порт РА             │
    │ 5 (IBFA) │ 1 = РА содержит данные, еще не выбранные процессором │
    │ 6-7      │ если  бит 3  регистра  управления  равен 0,  то это  │
    │          │ линии управления периферийным  устройством; если он  │
    │          │ равен 1, то это линии ввода состояния устройства.    │
    └──────────┴──────────────────────────────────────────────────────┘

    При выводе:

          Бит(ы)             Назначение
    ┌───────────┬─────────────────────────────────────────────────────┐
    │  4-5      │ то же, что 6,7 при вводе                            │
    │  6 (OBFA) │ 1 = РА содержит данные, еще не переданные           │
    │           │     периферийному устройству                        │
    │  7 (ASKA) │ 0 = данные из РА приняты устройством                │
    └───────────┴─────────────────────────────────────────────────────┘

    С группой А ассоциируется бит 3 порта РС, обозначаемый INTRA. Этот сиг-
нал применяется как линия запроса прерывания системной шины.  При  вводе  в
порт РА на этом выходе формируется 1, когда новые данные помещаются в РА, и
0, когда процессор считывает данные. При выводе INTRA = 1,  когда  содержи-
мое РА принято устройством, и 0, когда ЦП загружает новые данные.  Разреше-
нием прерываний управляют бит 4 РС в режиме ввода и бит 6 в  режиме  вывода
(1 = разрешить прерывание).
    Для группы В ввод или вывод задается битом 1 регистра  управления.  При
вводе биты 2 и 1 порта РС именуются STBB и IBFB (их  назначение  аналогично
битам STBA и IBFA). При выводе биты 2 и 1 именуются OBFB и ASKB (см. выше).
Бит 0 становится INTRB, разрешениями прерываний управляет бит 2.

   Режим 2. Этот режим допустим только для группы А. В нем порт А становит-
ся двунаправленным, а старшая тетрада РС определяется так:

            Бит(ы)            Назначение
       ┌──────────┬──────────────────────────────────────────────────┐
       │ 4 (STBA) │   0 = "стробировать" шину данных  РА             │
       │ 5 (IBFA) │   1 = порт РА загружаются данные с шины,         │
       │          │   0 = процессор читает данные                    │
       │ 6 (ACKA) │   1 = устройство готово читать данные с шины     │
       │ 7 (OBFA) │   1 = процессор загружает в порт РА данные,      │
       │          │   0 = данные приняты устройством                 │
       └──────────┴──────────────────────────────────────────────────┘

    Существует еще один режим - установка/сброс бита в PC в режиме 0.  Фор-
мат управляющего слова для этого случая:

   ┌─7─┬─6──5──4─┬─3──2──1─┬─0─┐
   │ 0 │ 0  0  0 │         │   │
   └───┴─────────┴────┬────┴─┬─┘
                      │      └───> Значение бита
                      │
                      └──────────> Номер устанавливаемого/сбрасываемого
                                     разряда.
    При программировании на "Кристе-2" следует помнить, что к порту PC  па-
раллельного интерфейса подключена схема управления цветом. Для  использова-
ния доступны (бесконфликтно) только разряды D2 и D3 (зарезервированные раз-
работчиками ПК  для  программной  эмуляции  последовательного  интерфейса).
Однако возможно полное использование PC, если можно пожертвовать  изображе-
нием на экране, например, для загрузки программ из внешнего ПЗУ.

    В качестве системного интерфейса (порты 00-03) применена также  микрос-
хема КР580ВВ55. Однако для нормальной работы ПК она может работать только в
режиме 0, причем, если в данный  момент  не  опрашивается  клавиатура,  м/с
программируется так, что каналы PA, PB, PC0-PC3 работают на вывод,  PC4-PC7
- на ввод. Управляющее слово - 88H.



                 А П П А Р А Т Н Ы Е    П Р Е Р Ы В А Н И Я

    ПК "Вектор-06ц" и "Криста-2" имеют в своем составе датчик сигнала  пре-
рывания. Он вырабатывает запрос на прерывание микропроцессора в момент  на-
чала обратного хода кадровой развертки, т.е. с периодом 20 мс. Сигнал  дат-
чика воздействует на вход INTRQ микропроцессора. Если прерывания разрешены,
то процессор завершает выполнение текущей программы и выдает сигнал  INTACK
на шину данных. Поскольку в ПК нет специального контроллера прерываний,  ни
одно ВУ не активизируется этим сигналом, и на шине данных присутствует  код
0FFH. Процессор воспринимает его как команду RST 7 и, запретив  прерывания,
выполняет ее - сохраняет в стеке текущий адрес и переходит на  ячейку  38H.
По этому адресу должен располагаться обработчик прерывания.
    Как правило, обработчик в начале своей работы должен сохранить все  ре-
гистры, а по окончании восстановить  их.  Завершение  обработки  прерывания
происходит по команде RET, причем, если непосредственно перед ней была ука-
зана команда EI, то разрешение прерываний произойдет только после  выполне-
ния RET. Так сделано для предотвращения вложенных прерываний.
    Прерывания также запрещаются при сбросе микропроцессора. Схема ПК  пос-
троена так, что сброс может происходить тоже только в момент обратного  хо-
да кадровой развертки.
    Из-за аппаратных особенностей ПК обработчик прерываний обычно занимает-
ся опросом клавиатуры и программированием палитры. Нередко также  использо-
вание его для создания фонового музыкального сопровождения, например, в иг-
рах.






              КОНТРОЛЛЕР НАКОПИТЕЛЯ НА ГИБКИХ МАГНИТНЫХ ДИСКАХ

    Дисковод является наиболее сложным из внешних устройств ПК.  Достаточно
сказать, что не существует единого способа подключения контроллера дисково-
да. Автору известны по крайней мере 4 варианта  интерфейса  контроллера  (в
дальнейшем - КД). Большинство изготовителей  придерживаются  "Кишиневского"
стандарта, рекомендованного разработчиками ПК. Незначительно отличается  от
него вариант Sphere+, распространяемый одноименной фирмой (возможно  созда-
ние универсальных программ). Контроллер дисковода,  выпускаемый  московской
фирмой Coman, отличается от обоих указанных выше вариантов. Существует  еще
вариант Омского центра программирования, способный работать на "Кристе-2" и
совместимый снизу вверх с "Кишиневским" вариантом.
    Все упомянутые контроллеры построены на основе БИС КР1818ВГ93.
    Микросхема КР1818ВГ93 представляет собой однокристальное  программируе-
мое устройство, предназначенное для управления  обменом  информацией  между
ЭВМ и накопителями на гибких магнитных дисках. БИС обеспечивает  программи-
рование номера дорожки, сектора и стороны диска, а также длины сектора, ре-
жимов поиска дорожки и установки магнитной головки  в  исходное  состояние,
режимов записи/чтения, скорости перемещения МГ.  Обмен  информацией  с  ЭВМ
происходит по восьмиразрядной двунаправленной шине данных.  Запись  осущес-
твляется с одинарной (английская аббревиатура - FM) или двойной (MFM) плот-
ностью. Поддерживаются дисководы 5.25" и 8". БИС не содержит схем  управле-
ния двигателем и выбора накопителя. Этим должно заниматься специальное  ус-
тройство управления.
    БИС содержит, как говорилось, 5  внутренних  регистров.  Их  назначение
следующее:
 - Data    (запись, чтение) - служит для обмена данными между ЭВМ и БИС.
 - Track   (запись, чтение) - содержит номер текущей дорожки.
 - Sector  (запись, чтение) - содержит номер сектора.
 - Status  (чтение)         - содержит результат выполнения команды.
 - Command (запись)         - служит для задания команды БИС.
Примечание. Чтение  Status возможно не ранее чем через 30мс после записи ко-
манды.

    Микросхема обеспечивает прием и выполнение 11 команд. Все  команды  ус-
ловно разделены на 4 типа: вспомогательные,  записи  и  чтения  информации,
поиска и чтения индексного поля и принудительного прерывания.

1. Вспомогательные команды.

    Команды этого типа выполняются вне зависимости  от  сигнала  готовности
накопителя.



    Команда RESTORE обеспечивает переход МГ на нулевую дорожку. Если  нуле-
вая дорожка не достигнута после 256 шагов, выполнение команды прекращается.
    Команда SEEK предполагает, что регистр Data  содержит  номер  требуемой
дорожки, а Track - текущей. Перемещение МГ выполняется до тех пор, пока  не
будет достигнута требуемая дорожка. По окончании регистр Track содержит но-
вый номер текущей дорожки.
    Команда STEP обеспечивает перемещение головки на 1 шаг. Направление пе-
ремещения совпадает с направлением предыдущего движения головки.
    Команды STEPF и STEPB обеспечивают перемещение головки на 1  шаг  соот-
ветственно вперед или назад.

Состояние битов регистра Status в процессе и после выполнения этих команд:

R7: 1=накопитель не готов.
R6: 1=дискета защищена от записи.
R5: 1=головка прижата.
R4: 1=ошибка поиска.
R3: 1=ошибка в контрольном коде заголовка сектора
R2: 1=МГ на нулевой дорожке.
R1: 1=индексный импульс.
R0: 1=идет выполнение команды.


2. Команды чтения и записи данных.

    Перед выполнением этих команд необходимо в регистры Track и Sector  за-
писать номер требуемой дорожки и сектора соответственно. Длина сектора  за-
дается кодом в индексной области (заголовке):

00 = 128  байт на сектор;
01 = 256  байт на сектор;
02 = 512  байт на сектор;
03 = 1024 байт на сектор.

    Команда READSCT выполняется, когда прочитан заголовок сектора  с  пара-
метрами, совпадающими с запрошенными в Track и Sector. Если за 10  оборотов
диска запрошенный сектор не найден, вырабатывается признак СЕКТОР НЕ НАЙДЕН
и прекращается выполнение команды. Если сектор найден, он  байт  за  байтом
считывается и передается в регистр Data. В момент передачи  устанавливается
сигнал DRQ и признак ЗАПРОС ДАННЫХ в Status. Регистр Data должен быть  счи-
тан в течение 20мкс после установки признака. Если это не произойдет, то  в
Data записывается следующий байт и вырабатывается признак ПОТЕРЯ ДАННЫХ.  В
конце считывания проверяется контрольная сумма. В случае несовпадения  выс-
тавляется признак ОШИБКА КОНТРОЛЬНОГО КОДА и выполнение команды прекращает-
ся, даже в случае многосекторного режима (m=1).
    Команда WRITESCT выполняется аналогично. Если регистр Data не будет за-
писан в течение 20мс после установки признака ЗАПРОС ДАННЫХ,  то  вырабаты-
вается признак ПОТЕРЯ ДАННЫХ, а на диск записывается байт нулей.

Значение битов регистра Status:

    READSCT                         WRITESECT

R7: 1=Накопитель не готов.          Накопитель не готов.
R6: всегда 0                        Защита записи2R5: 1=стертые данные                Ошибка записи
R4: 1=сектор не найден              Сектор не найден
R3: 1=ошибка в контрольном коде     Ошибка в контрольном коде
R2: 1=потеря данных                 Потеря данных
R1: 1=запрос данных                 Запрос данных
R0: 1=идет выполнение команды.      Идет выполнение команды.

3. Команды поиска и чтения индексного поля.
    Эти команды  предназначены для поиска информации на диске и для формати-
рования.
    Команда READADR предназначена для  определения  положения  головки.  По
этой команде последовательно считываются с диска и передаются в ЭВМ 6  байт
индексной области первого обнаруженного на диске  сектора:  номер  дорожки,
номер стороны, номер сектора, код длины  сектора,  двухбайтная  контрольная
сумма. В процессе выполнения этой  команды  содержимое  Sector  разрушается
(туда копируется содержимое Track). Если за 10 оборотов диска ни один  сек-
тор не будет найден, устанавливается признак СЕКТОР НЕ НАЙДЕН.
    Команда READTRK предназначена для отладочных целей. По этой команде до-
рожка считывается целиком (начало дорожки определяется  по  индексному  им-
пульсу) и передается в ЭВМ. Проверка контрольного кода не производится.
    Команда WRITETRK предназначена для форматирования дорожки. Информация в
ЭВМ для этой процедуры должно содержать все пробелы, индексные метки и т.д.
Байты F5H-FEH - служебные и предназначены для записи контрольных кодов, ме-
ток и т.п. Запись дорожки начинается в момент прихода индексного импульса.

Содержимое регистра Status:

    READADDR              READTRK               WRITETRK
R7: 1=накопитель не готов 1=накопитель не готов 1=накопитель не готов
R6: всегда 0              всегда 0              1=защита записи
R5: всегда 0              всегда 0              1=ошибка записи
R4: 1=сектор не найден    всегда 0              всегда 0
R3: 1=ошибка контроля     всегда 0              всегда 0
R2: 1=потеря данных       1=потеря данных       1=потеря данных
R1: 1=запрос данных       1=запрос данных       1=запрос данных
R0: 1=идет выполнение     1=идет выполнение     1=идет выполнение

4. Команды прерывания.

    По этим командам выполнение текущей команды прекращается и  генерирует-
ся сигнал INTRQ. В зависимости от кода команды, возможны различные  условия
генерации этого сигнала.

Коды команд:

        ┌──────────┬─────────────────────────────────┐
        │ Команда  │             Биты                │
        │          │ 7   6   5   4   3   2   1   0   │
        ├──────────┼─────────────────────────────────┤
        │ RESTORE  │ 0   0   0   0   h   V   Ч1  Ч0  │
        │ SEEK     │ 0   0   0   1   h   V   Ч1  Ч0  │
        │ STEP     │ 0   0   1   И   h   V   Ч1  Ч0  │
        │ STEPF    │ 0   1   0   И   h   V   Ч1  Ч0  │
        │ STEPB    │ 0   1   1   И   h   V   Ч1  Ч0  │
        ├──────────┼─────────────────────────────────┤
        │ READSCT  │ 1   0   0   m   S   E   C   0   │
        │ WRITESCT │ 1   0   1   m   S   E   C   а0  │
        ├──────────┼─────────────────────────────────┤
        │ READADR  │ 1   1   0   0   0   E   0   0   │
        │ READTRK  │ 1   1   1   0   0   E   0   0   │
        │ WRITETRK │ 1   1   1   1   0   E   0   0   │
        ├──────────┼─────────────────────────────────┤
        │ INTERRUPT│ 1   1   0   1   j3  j2  j1  j0  │
        └──────────┴─────────────────────────────────┘

  h=1 - прижимать головку, h=0 - нет.
  V=0 - не проверять положение МГ, V=1 - проверять.
  И=0 - не изменять Track во время выполнения команды; И=1 - изменять.
  m=0 - работать с одним сектором, m=1 - работать до конца дорожки.
  S=0 - нижняя сторона, S=1 - верхняя сторона.
  C=0 - не проверять совпадение стороны, C=1 - проверять.
  Е=1 - задержка 15мс после приема команды (подвод головки), Е=0-без задерж.
  Ч1=0,  Ч0=0 - время на шаг 6 мс
  Ч1=0,  Ч0=1 - время на шаг 12 мс
  Ч1=1,  Ч0=0 - время на шаг 20 мс
  Ч1=1,  Ч0=1 - время на шаг 30 мс.
  а0=0 - обычнаязапись,  а0=1 - запись стертых данных.
  j0=1 - прерывание по готовности накопителя.
  j1=1 - прерывание по неготовности накопителя.
  j2=1 - прерывание по индексному импульсу.
  j3=1 - немедленное прерывание.
      Структура информации для форматирования дорожки (MFM):

         ┌────────┬──────┬───────────────────────────────────────┐
         │ Число  │ Байт │          Назначение                   │
         │ байтов │      │                                       │
         │ десят. │      │                                       │
         ├────────┼──────┼───────────────────────────────────────┤
         │  80    │  4Е  │ Пробел от начала индексного импульса  │
         │  12    │  00  │                                       │
         │   3    │  F6  │ Запись байтов C2                      │
         │   1    │  FC  │ Индексная метка начала дорожки        │
         │  50 ─┐ │  4Е  │ Пробел перед сектором                 │
         │  12  │ │  00  │                                       │
         │   3  │ │  F5  │ Запись байтов A1                      │
         │   1  │ │  FE  │ Метка заголовка сектора               │
         │   1  │ │  ХХ  │ Номер дорожки                         │
         │   1  │ │  ХХ  │ Номер стороны                         │
         │   1  │ │  ХХ  │ Номер сектора                         │
         │   1  │ │  ХХ  │ Код длины сектора                     │
         │   1  │ │  F7  │ Запись контрольной суммы              │
         │  22  │ │  4Е  │ Пробел перед данными                  │
         │  12  │ │  00  │                                       │
         │   3  │ │  F5  │ Запись байтов A1                      │
         │   1  │ │  FB  │ Метка данных                          │
         │ ХХХ  │ │  E5  │ Сектор                                │
         │   1 ─┘ │  F7  │ Запись контрольной суммы              │
         │  ###   │      │ Запись остальных секторов             │
         │  &&&   │  4Е  │ Продолжение записи до конца дорожки.  │
         └────────┴──────┴───────────────────────────────────────┘

Назначение служебных байтов (MFM):

F5: запись байта A1, запуск вычисления контрольного кода (суммы);
F6: запись байта C2;
F7: запись контрольного кода (контрольной суммы).

    В режиме MFM на одну дорожку можно записать:

 - пять секторов размером 1024 байта;
 - девять (на некоторых накопителях - 10) секторов размером 512 байт;
 - шестнадцать секторов размером 256 байт;
 - двадцать шесть секторов размером 128 байт.

    Подробная информация о БИС КР1818ВГ93 опубликована в журнале "Микропро-
цессорные средства и системы", 3-1986, стр. 3-8.

      В ПК "Вектор" адреса регистров БИС (номера портов) следующие:

      ┌──────────┬────────────┬───────────┐
      │ Регистр  │ Порт Coman │ Остальные │
      ├──────────┼────────────┼───────────│
      │ Data     │ 9EH        │ 18H       │
      │ Sector   │ BEH        │ 19H       │
      │ Track    │ DEH        │ 1AH       │
      │ Command  │ FEH        │ 1BH       │
      │ Status   │ FEH        │ 1BH       │
      └──────────┴────────────┴───────────┘

      Кроме того, каждый контроллер содержит еще регистр управления; Sphera
  и Coman имеют второй регистр статуса.
      Контроллеры Кишиневского варианта, Омского варианта и  Кристы-2.  Но-
  мер порта управления - 1CН. Доступен только по записи.
   ┌─────┬────────────────┬──────────────────┬──────────────────────┐
   │     │ Кишиневский    │        Омский    │      Криста-2        │
   ├─────┼────────────────┴──────────────────┴──────────────────────┤
   │ R0: │          выбор накопителя (0=A/C, 1=B/D)                 │
   │ R1: │ Выбор 0=AB,1=CD│       Не задействован; всегда АВ        │
   │ R2: │    1=нижняя сторона, 0=верхняя сторона                   │
   │ R3: │           Не задействован                                │
   │ R4: │ 0=8", 1=5"     │       Не задействован; всегда 5"        │
   │ R5: │ 0=FM, 1=MFM    │       Не задействован; всегда MFM       │
   │ R6: │           Не задействован                                │
   │ R7: │ Не задействован│ Не задействован  │ 0=стандартный,       │
   │     │                │                  │ 1=совмещенный режим  │
   └─────┴────────────────┴──────────────────┴──────────────────────┘

      Для запуска двигателя необходимо записать байт в регистр  управления.
  После этого двигатель работает в течение 2.5 сек. Перезапись регистра во-
  зобновляет отсчет времени с момента последней записи.

      Контроллер фирмы Coman. Номер порта управления - 1ЕН. Доступен только по
  записи.

  R0,R1: выбор накопителя (A-D)
  R2:    сброс БИС ВГ93 (для сброса записать 0; нормально - 1)
  R3:    сигнал готовности головки (записать 1 перед выполнением команд)
  R4:    0=верхняя сторона, 1=нижняя
  R5:    не задействован
  R6:    0=MFM, 1=FM
  R7:    не задействован.
  Второй регистр статуса. Номер порта - 1ЕН. Доступен только по чтению.

  R0-R5: не задействованы
  R6:    сигнал DRQ
  R7:    сигнал INTRQ.

      Для запуска двигателя необходимо выполнить любую вспомогательную  ко-
манду с модификатором прижима головки, а затем  установить  бит  готовности
головки в регистре управления. Время выбега двигателя - 2 сек.  (10  оборо-
тов диска).


    Контроллер фирмы Sphere+.  Номер порта управления - 1СН. Доступен только
по записи.

R0,R1: выбор накопителя (A-D)
R2:    0=верхняя сторона, 1=нижняя сторона
R3:    0=выбор накопителя запрещен, 1=разрешен.
R4-R7: не задействованы.

Второй регистр статуса. Номер порта - 1СН. Доступен только по чтению.

R0,R1: не задействованы
R2:    инверсный DRQ
R3:    INTRQ
R4-R7  не задействованы

    Для запуска двигателя необходимо занести в регистр управления байт, вы-
бирающий нужный накопитель и разрешающий выбор. Двигатель накопителя  будет
работать до тех пор, пока не будет выбран другой накопитель  или  не  будет
сброшен бит разрешения выбора в регистре управления.

    Для  того,  чтобы  что-то  сделать  с  дисководом   (прочитать/записать
сектор), нужно уметь включать мотор, выбирать  накопитель,  позиционировать
головку и обмениваться данными. Однако, как правило, человек, имеющий  дис-
ковод и контроллер, использует его не просто так, а под операционной систе-
мой (напр. CP/M). И система обычно не любит, чтобы  пользовательская  прог-
рамма сама работала с регистрами контроллера - такие действия часто  закан-
чиваются "повисанием". Поэтому рекомендуется в таких  программах  сохранять
состояние всей используемой дисковой аппаратуры - регистров Sector и Track,
положение головок всех используемых накопителей.
    Вот пример программы, определяющей текущую дорожку, на которой находит-
ся головка накопителя, вне зависимости от того, какая  дискета  установлена
(даже неформатированная).

SAFE:   IN TRACK          ; Сохраняем регистр Track
        STA TRKBUF        ; в ячейке TRKBUF,
        IN SECTOR         ; а регистр Sector -
        STA SCTBUF        ; в SCTBUF.
WAIT:   CALL MOTOR        ; Запустим мотор, выберем накопитель.
                          ; Реализация этой процедуры зависит
                          ; от типа контроллера
        IN STATUS         ; Накопитель готов (дверь закрыта)?
        RLC               ; Бит готовности -> флаг переноса
        JC WAIT           ; Нет, еще не готов.
        MVI A,STEPF       ; Делаем шаг вперед
        CALL DO
        MVI B,255         ; B - счетчик шагов
LOOP:   MVI A,STEPB       ; Делаем шаг назад
        CALL DO
        INR B             ; Инкрементируем счетчик шагов.
        IN STATUS         ; Читаем результат.
        ANI 4             ; Нулевая дорожка?
        JZ LOOP           ; Нет еще.
        MOV A,B           ; Иначе B содержит номер дорожки, на которой
        STA TRK0          ; стояла головка
        CALL STOP         ; Остановим мотор (для контроллера Sphera+)
        RET               ; Закончим.
;
DO      PROC              ; Процедура выполнения вспомогательной команды
        OUT COMMAND       ; Пошлем команду в ВГ93
DO_1:   IN STATUS         ; Команда уже выполняется?
        RRC               ; Бит выполнения -> флаг переноса
        JNC DO_1          ; Еще не выполняется.
DO_2:   IN STATUS
        RRC               ; Команда еще выполняется?
        JC DO_2           ; Да.
        RET               ; Команда выполнена.
DO      ENDP

    Для восстановления положения головки можно пользоваться, например,  та-
кой программой:








REST:   CALL MOTOR        ; Запустим мотор
        MVI A,RESTORE     ; Головку - на нулевую дорожку
        CALL DO
        LDA TRK0          ; Номер требуемой дорожки ->
        OUT DATA          ; -> в регистр данных
        MVI A,SEEK
        CALL DO           ; Позиционирование на сохраненную дорожку.
        LDA TRKBUF        ; Восстанавливаем регистры
        OUT TRACK
        LDA SCTBUF
        OUT SECTOR
        RET               ; Вот и все.

    Как было сказано выше, перед началом чтения нужно установить головку на
нужную дорожку. Для этой цели можно использовать программу, аналогичную вы-
шеприведенной. Но необходимо помнить, что в дисковод может быть  установле-
на дискета не того типа,  на  который  рассчитан  накопитель,  например,  в
80-дорожечный накопитель может быть вставлена 40-дорожечная дискета. В этом
случае для перемещения головки на соседнюю дорожку необходимо перемещать ее
на 2 шага, а значение в регистре Track изменять на 1. Чтобы определить, ка-
кая дискета установлена, можно воспользоваться информацией, содержащейся  в
системной области диска. Однако этот способ не универсальный.  Гораздо  на-
дежнее, например, позиционировать головку на дорожку 2  и  прочитать  адрес
(команда READADR). Если на самом деле головка стоит на 1 дорожке -  то  это
ситуация 40дор. диск в 80дор. накопителе.
    Предположим, что Вы установили головку  на  нужную  дорожку  и  регистр
Sector содержит номер требуемого сектора. Процесс  чтения  происходит  так.
Запускается мотор дисковода. Когда накопитель будет готов,  посылается  ко-
манда READSCT. В подтверждение выполнения контроллер устанавливает бит  вы-
полнения. Теперь нужно следить за состоянием бита ЗАПРОС ДАННЫХ. Когда этот
бит равен 1, необходимо прочитать содержимое регистра Data и записать его в
память. Так продолжать до тех пор, пока бит выполнения не очистится  (можно
для проверки окончания процесса чтения проверять состояние сигнала INTRQ (в
контроллерах Coman и Sphere+), который равен 1 в момент завершения выполне-
ния команды.
    Из-за довольно низкой тактовой частоты процессора процесс чтения крити-
чен ко времени(особенно на "Кристе-2"). Во время чтения  прерывания  должны
быть запрещены. Более того, без применения программных ухищрений  невозмож-
но одновременно следить за битами ЗАНЯТО и ЗАПРОС ДАННЫХ. Как эта  ситуация
обходится - читайте ниже.
    При чтении возможно  возникновение  ошибок.  Наиболее  часто  возникают
ошибки "Сектор не найден" и "Ошибка контрольного кода". Разберемся,  почему
они возникают.
    Ошибка "Сектор не найден" возникает, если по каким-то причинам не прои-
зойдет идентификация сектора.  Это  случится,  например,  если  в  дисковод
вставлена неформатированная дискета, неверно  позиционирована  головка  или
заголовок сектора поврежден. При чтении контроллер пытается прочитать заго-
ловок сектора с требуемыми параметрами -  номером  дорожки,  стороны  (если
затребована такая проверка) и сектора. Если он не будет найден за 10 оборо-
тов диска, устанавливается признак СЕКТОР НЕ НАЙДЕН.  Поскольку  диск  вра-
щается со скоростью 5 оборотов в секунду, то для того, чтобы эта ошибка  не
приводила к повисанию, время выбега двигателя должно быть не менее 2.5  сек
(это относится только к контроллеру МикроДОС).
    ОШИБКА КОНТРОЛЬНОГО КОДА происходит, если, например, загрязнена  голов-
ка дисковода, неверная юстировка, некачественная запись, наводки, помехи  и
т.п. Иногда для ее устранения полезно делать несколько попыток чтения  сек-
тора.
    Приведем здесь два варианта программ чтения сектора. Первая из них при-
меняется в почти всех программах, работающих с диском (по-видимому,  она  -
ровесница ДОС). Вторая была разработана в Омском центре программирования  и
применяется в Универсальном загрузчике Spase.
    Будем считать, что мотор запущен и регистры  Track  и  Sector  содержат
верные параметры.

RSECT:  DI              ; Запретим прерывания - критично по времени
        LXI H,BUF       ; HL - адрес буфера, кратный 256
        MVI A,READSCT   ; Команду READSCT
        OUT COMMAND     ; пошлем в регистр команд
RRDY:   IN STATUS       ; Ожидаем начала выполнения:
        RRC             ; Выделим бит выполнения
        JNC RRDY        ; Он сброшен  - ждем.
        MVI B,2         ; Маска бита ЗАПРОС ДАННЫХ
        LDA SCTSIZE     ; Читаем код размера сектора
                        ; (должен быть записан сюда заранее)
        DCR A           ; =1 ?
        JZ R256         ; Да, сектор в 256 байт
        DCR A           ; =2 ?
        JZ R512         ; Да, сектор в 512 байт
                        ; Иначе - 1024 байта
R1024:  IN STATUS       ; Читаем статус
        ANA B           ; Выделяем бит запроса данных.
        JZ R1024        ; Он сброшен - запроса нет.
        IN DATA         ; Читаем порт данных
        MOV M,A         ; Записываем в ОЗУ
        INR L           ; Инкрементируем смещение
        JNZ R1024       ; 256 байт еще не прочитаны
        INR H           ; Читаем следующие 256 байт
R768:   IN STATUS       ; Читаем статус
        ANA B           ; Выделяем бит запроса данных.
        JZ R768         ; Он сброшен - запроса нет.
        IN DATA         ; Читаем порт данных
        MOV M,A         ; Записываем в ОЗУ
        INR L           ; Инкрементируем смещение
        JNZ R768        ; 256 байт еще не прочитаны
        INR H           ; Читаем следующие 256 байт
R512:   IN STATUS       ; Читаем статус
        ANA B           ; Выделяем бит запроса данных.
        JZ R512         ; Он сброшен - запроса нет.
        IN DATA         ; Читаем порт данных
        MOV M,A         ; Записываем в ОЗУ
        INR L           ; Инкрементируем смещение
        JNZ R512        ; 256 байт еще не прочитаны
        INR H           ; Читаем следующие 256 байт
R256:   IN STATUS       ; Читаем статус
        ANA B           ; Выделяем бит запроса данных.
        JZ R256         ; Он сброшен - запроса нет.
        IN DATA         ; Читаем порт данных
        MOV M,A         ; Записываем в ОЗУ
        INR L           ; Инкрементируем смещение
        JNZ R256        ; 256 байт еще не прочитаны
REND:   IN STATUS       ; Ждем завершения
        RRC             ; Завершено?
        JC REND         ; Нет еще. Ждем.
        IN STATUS       ; В аккумуляторе - код завершения.

    Очевидно, что приведенная выше программа обладает недостатками.  Основ-
ной из них - требование заранее знать размер сектора и размещать его по ад-
ресу, кратному 256 байт. Да и размер ее довольно велик.  Ниже  предлагается
программа, работающая по так называемому паритетному алгоритму.

RSECT:  LXI H,BUF       ; HL - адрес буфера
        DI
        MVI A,READSCT
        OUT COMMAND
RRDY:   IN STATUS
        RRC
        JNC RRDY        ; до этого момента - аналогично предыдущему
        MVI B,3         ; Маска ВЫПОЛНЕНИЕ & ЗАПРОС ДАННЫХ
        JMP LOOP2       ; Обходим участок...
LOOP1:  MOV M,A         ; Заносим байт в ОЗУ
        INX H           ; Инкремент адреса
LOOP2:  IN STATUS       ; Читаем статус
        ANA B           ; Выделим нужные биты
; Флаг паритета процессора = 0,  если только один из двух выделенных битов -
; единичный. Поскольку ситуация, при которой ЗАПРОС ДАННЫХ = 1, а ВЫПОЛНЕНИЕ
; =0 - невозможна,  то (PF=0) обозначает, что команда еще выполняется и зап-
; роса данных нет.
        JPO LOOP2
        IN DATA         ; Читаем порт данных
; Флаг паритета будет равен 1,  если либо оба выделенных бита  =1,  и  тогда
; нужно обработать запрос данных,  либо оба равны 0,  и тогда выполнение ко-
; манды закончено. Но в последнем случае дополнительно флаг Z=1. Поэтому
        JNZ LOOP1
        IN STATUS       ; На выходе в аккумуляторе - код завершения.

    Поскольку выполнение команды рано или поздно кончается,  эта  программа
не "зависает", если не найден сектор, как предыдущая. Кроме того, она  зна-
чительно короче.

    Операция записи выполняется на  всех  контроллерах,  кроме  "Криста-2",
аналогично. Приведем здесь паритетный вариант программы записи сектора.

WSECT:  LXI H,BUF
        DI
        MVI A,WRITESCT
        OUT COMMAND
        IN STATUS
        RRC
        JNC $-3
        MVI B,3
LOOP:   IN STATUS
        ANA B
        JPO LOOP
        MOV A,M         ; Эти команды
        OUT DATA        ; на флаги процессора
        INX H           ; не влияют.
        JNZ LOOP
        DCX H           ; Был лишний инкремент
        IN STATUS

                Запись информации на диск на ПК "Криста-2".

    На "Кристе-2" с Омским контроллером процесс записи протекает иначе. Де-
ло в том, что из-за более низкой тактовой частоты (2.5 мГц) приведенная вы-
ше программа записи не работает - возникает ПОТЕРЯ ДАННЫХ. Поэтому  в  кон-
троллер был введен дополнительный режим - Режим  Совмещенного  Доступа.  Он
включен, если установлен бит R7 порта управления. В этом режиме при появле-
нии сигнала DRQ (ЗАПРОС ДАННЫХ) при попытке процессора записать байт в  ОЗУ
он будет параллельно записан в один из регистров м/с ВГ93.  Номер  регистра
определяется двумя младшими битами старшего байта адреса по схеме:

00 - Data
01 - Sector
10 - Track
11 - Command

    Обычно для записи используют ячейку 3BH, но это не обязательно.  Приве-
дем пример программы записи на диск сектора на "Кристе-2".

WSECT2: DI
        LXI D,BUF       ; DE - адрес буфера
        LXI H,3BH       ; HL - "псевдорегистр" Data
        MVI A,WRITESCT
        OUT COMMAND
        IN STATUS
        RRC
        JNC $-3
        CALL MODE_ON    ; Включим режим совмещенного доступа.
                        ; Время на это есть - на диске идет пробел.
        MVI B,3
LOOP1:  LDAX D          ; Подготовим байт на запись
        MOV C,A         ; В регистре C
        INX D           ; Инкремент адреса в буфере
LOOP2:  IN STATUS
        ANA B
        JPO LOOP2
        MOV M,C         ; Запись на диск!
        JNZ LOOP1
        CALL MODE_OFF   ; Выключим режим совмещенного доступа
        IN STATUS       ; Результат записи.

    Подпрограммы включения/выключения режима  совмещенного  доступа  должны
"знать" номер дисковода и стороны, т.к. они записывают регистр управления.
Т.к. форма хранения этих параметров зависит от конкретного приложения, здесь
эти подпрограммы не приводятся, тем более, что они очень просты.
    У читателя может возникнуть вопрос: почему же  программа  чтения  рабо-
тает на "Кристе", а программа записи - нет? Но ведь в программе записи меж-
ду обнаружением запроса данных и обращением к регистры Data  вставлена  еще
одна команда, извлекающая записываемый байт из памяти. Лишние 7 тактов  ли-
шают программу работоспособности на "Кристе". Использование  адресации  ре-
гистра как ячейки ОЗУ позволяет применить запись в регистр Data не из акку-
мулятора, а из другого регистра процессора, куда информация может быть  по-
мещена заранее. В этом и заключается основная идея режима совмещенного дос-
тупа.

    В режиме FM информацию можно записывать и при помощи обычной программы.
Однако автору неизвестны ДОС, ориентированные на "Вектор"  и  работающие  в
FM. Разрабатывать же свою ДОС означало отказаться от совместимости с  "Век-
тором" на уровне дискет и обречь владельцев контроллеров на программный го-
лод. Поэтому был избран такой путь.

                      Э Л Е К Т Р О Н Н Ы Й    Д И С К

    Исторически электронный диск появился одновременно с компьютером и зна-
чительно раньше контроллера дисковода. Это  отразилось  на  дисковых  ОС  -
большинству из них для работы необходим электронный диск. Затем был  разра-
ботан контроллер дисковода - сначала для "Вектора", а потом (ноябрь 1992г.)
- для "Кристы". Однако ЭД вызывает больше вопросов, чем  любое  другое  ус-
тройство.
    Электронный диск существует в 2-х вариантах: версии 64Кб и 256Кб.  Наи-
более распространенным является ЭД 256 Кб, собранный на м/с К565РУ5 (ориги-
нальный вариант). Все ЭД 100% программно совместимы.
    Аппаратно ЭД разбит на 4 зоны по 64Кб с номерами 0,1,2,3  (версия  64Кб
имеет только зону 0). Обращение к электронному диску возможно в  2-х  режи-
мах: режим прямой адресации и стек.

    Режим прямой адресации заключается в том, что область  ОЗУ  по  адресам
A000H- DFFFH при обращении к ней процессора (но  не  видеоадаптера!)  заме-
щается ОЗУ ЭД. Это дает возможность ОС, использующим  стандартный  видеоре-
жим, "убрать" видеопамять из адресного пространства ПК, расширив, таким об-
разом, память. Адреса A000H - DFFFH называются подэкранным  ОЗУ.  В  случае
ЭД-256 возможно использование 4-х страниц подэкранного ОЗУ (но  не  видеос-
траниц).

    Режим стека заключается в том, что при любой операции со стеком,  явной
или неявной, обмен информацией будет происходить с ОЗУ ЭД. Поскольку стеко-
вые операции работают быстро, этот режим используется ОС для создания  вир-
туального диска. При использовании этого режима как метода обращения к вир-
туальному диску прерывания должны бвть запрещены во время  обращения,  т.к.
при прерывании в стек помещается адрес возврата,  искажая,  таким  образом,
содержимое диска.
    Возможно одновременное включение обоих режимов. При этом  режим  "Стек"
имеет больший приоритет, т.е. при обращении к  стеку  по  адресам  A000H  -
DFFFH обмен информацией будет происходить с зоной, выбранной  для  стековых
операций (хотя она может совпадать с зоной, адреса A000H-DFFFH которой  ис-
пользуются как подэкранное ОЗУ).




    Для управления режимами ЭД служит порт 10H, доступный только по записи.

R0,R1: инверсный номер зоны подэкранного ОЗУ
R2,R3: инверсный номер зоны стека
R4:    1=разрешено обращение как к стеку
R5:    1=разрешено обращение как к подэкранному ОЗУ
R6,R7: не задействованы.

    Формат (распределение памяти)  электронного диска меняется от ОС к ОС и
потому здесь не описывается.
